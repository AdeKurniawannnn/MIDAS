'use client'\n\n// Responsive layout components with mobile-first design\nimport React, { useState, useEffect } from 'react'\nimport { motion, useViewportScroll, useTransform, AnimatePresence } from 'framer-motion'\nimport { Button } from '@/components/ui/button'\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'\nimport { \n  Menu,\n  X,\n  ChevronUp,\n  Filter,\n  Search,\n  Grid,\n  List,\n  Settings\n} from 'lucide-react'\nimport { useTouchGestures } from './hooks'\n\n// Mobile-optimized filter drawer\nexport const MobileFilterDrawer: React.FC<{\n  children: React.ReactNode\n  isOpen: boolean\n  onOpenChange: (open: boolean) => void\n}> = ({ children, isOpen, onOpenChange }) => {\n  return (\n    <Sheet open={isOpen} onOpenChange={onOpenChange}>\n      <SheetContent side=\"bottom\" className=\"h-[80vh]\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold\">Filters & Sort</h3>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={() => onOpenChange(false)}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"overflow-y-auto max-h-[60vh]\">\n          {children}\n        </div>\n      </SheetContent>\n    </Sheet>\n  )\n}\n\n// Responsive grid with adaptive columns\nexport const ResponsiveGrid: React.FC<{\n  children: React.ReactNode\n  minItemWidth?: number\n  gap?: number\n  className?: string\n}> = ({ \n  children, \n  minItemWidth = 300, \n  gap = 24, \n  className = '' \n}) => {\n  const [columns, setColumns] = useState(1)\n  \n  useEffect(() => {\n    const calculateColumns = () => {\n      const width = window.innerWidth - 32 // Account for padding\n      const cols = Math.floor((width + gap) / (minItemWidth + gap))\n      setColumns(Math.max(1, cols))\n    }\n    \n    calculateColumns()\n    window.addEventListener('resize', calculateColumns)\n    return () => window.removeEventListener('resize', calculateColumns)\n  }, [minItemWidth, gap])\n  \n  return (\n    <div \n      className={`grid ${className}`}\n      style={{\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n        gap: `${gap}px`\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\n// Touch-friendly navigation bar\nexport const TouchNavigationBar: React.FC<{\n  onFilterToggle: () => void\n  onSearchToggle: () => void\n  onViewModeToggle: () => void\n  viewMode: 'grid' | 'list'\n  hasActiveFilters: boolean\n}> = ({ \n  onFilterToggle, \n  onSearchToggle, \n  onViewModeToggle, \n  viewMode,\n  hasActiveFilters \n}) => {\n  const { gestureState, touchHandlers } = useTouchGestures()\n  const [isVisible, setIsVisible] = useState(true)\n  const [lastScrollY, setLastScrollY] = useState(0)\n  \n  // Hide/show nav on scroll\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY\n      const isScrollingDown = currentScrollY > lastScrollY\n      \n      if (currentScrollY > 100) {\n        setIsVisible(!isScrollingDown)\n      } else {\n        setIsVisible(true)\n      }\n      \n      setLastScrollY(currentScrollY)\n    }\n    \n    window.addEventListener('scroll', handleScroll, { passive: true })\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [lastScrollY])\n  \n  return (\n    <motion.div\n      className=\"md:hidden fixed bottom-4 left-4 right-4 z-40\"\n      initial={{ y: 0 }}\n      animate={{ y: isVisible ? 0 : 100 }}\n      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n      {...touchHandlers}\n    >\n      <div className=\"flex items-center justify-between bg-background/95 backdrop-blur-md border rounded-full shadow-lg px-4 py-3\">\n        {/* Search */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onSearchToggle}\n          className=\"h-10 w-10 p-0 rounded-full\"\n        >\n          <Search className=\"h-5 w-5\" />\n        </Button>\n        \n        {/* Filter */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onFilterToggle}\n          className=\"h-10 w-10 p-0 rounded-full relative\"\n        >\n          <Filter className=\"h-5 w-5\" />\n          {hasActiveFilters && (\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full\" />\n          )}\n        </Button>\n        \n        {/* View Mode */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onViewModeToggle}\n          className=\"h-10 w-10 p-0 rounded-full\"\n        >\n          {viewMode === 'grid' ? <List className=\"h-5 w-5\" /> : <Grid className=\"h-5 w-5\" />}\n        </Button>\n        \n        {/* Settings */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-10 w-10 p-0 rounded-full\"\n        >\n          <Settings className=\"h-5 w-5\" />\n        </Button>\n      </div>\n      \n      {/* Swipe indicator */}\n      {gestureState.isSwipeLeft && (\n        <motion.div\n          className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs text-muted-foreground\"\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: 10 }}\n        >\n          Swipe left\n        </motion.div>\n      )}\n    </motion.div>\n  )\n}\n\n// Parallax header component\nexport const ParallaxHeader: React.FC<{\n  title: string\n  subtitle?: string\n  backgroundImage?: string\n  height?: string\n}> = ({ \n  title, \n  subtitle, \n  backgroundImage, \n  height = '60vh' \n}) => {\n  const { scrollY } = useViewportScroll()\n  const y = useTransform(scrollY, [0, 500], [0, 150])\n  const opacity = useTransform(scrollY, [0, 300], [1, 0])\n  \n  return (\n    <motion.div \n      className=\"relative overflow-hidden flex items-center justify-center\"\n      style={{ height, y }}\n    >\n      {backgroundImage && (\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n          style={{ backgroundImage: `url(${backgroundImage})` }}\n        />\n      )}\n      <div className=\"absolute inset-0 bg-black/40\" />\n      \n      <motion.div \n        className=\"relative z-10 text-center text-white px-4\"\n        style={{ opacity }}\n      >\n        <motion.h1 \n          className=\"text-4xl md:text-6xl font-bold mb-4\"\n          initial={{ y: 50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.8, delay: 0.2 }}\n        >\n          {title}\n        </motion.h1>\n        {subtitle && (\n          <motion.p \n            className=\"text-xl md:text-2xl text-white/90\"\n            initial={{ y: 30, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n          >\n            {subtitle}\n          </motion.p>\n        )}\n      </motion.div>\n    </motion.div>\n  )\n}\n\n// Sticky scroll progress indicator\nexport const ScrollProgress: React.FC = () => {\n  const { scrollYProgress } = useViewportScroll()\n  \n  return (\n    <motion.div\n      className=\"fixed top-0 left-0 right-0 h-1 bg-primary origin-left z-50\"\n      style={{ scaleX: scrollYProgress }}\n    />\n  )\n}\n\n// Back to top button with scroll threshold\nexport const BackToTopButton: React.FC = () => {\n  const [isVisible, setIsVisible] = useState(false)\n  \n  useEffect(() => {\n    const handleScroll = () => {\n      setIsVisible(window.scrollY > 500)\n    }\n    \n    window.addEventListener('scroll', handleScroll)\n    return () => window.removeEventListener('scroll', handleScroll)\n  }, [])\n  \n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' })\n  }\n  \n  return (\n    <motion.button\n      className=\"fixed bottom-20 right-4 md:bottom-4 z-30 p-3 bg-primary text-white rounded-full shadow-lg hover:shadow-xl transition-shadow\"\n      initial={{ scale: 0, opacity: 0 }}\n      animate={{ \n        scale: isVisible ? 1 : 0, \n        opacity: isVisible ? 1 : 0 \n      }}\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.9 }}\n      onClick={scrollToTop}\n      aria-label=\"Back to top\"\n    >\n      <ChevronUp className=\"h-6 w-6\" />\n    </motion.button>\n  )\n}\n\n// Responsive masonry layout\nexport const MasonryLayout: React.FC<{\n  children: React.ReactNode\n  columns?: { mobile: number; tablet: number; desktop: number }\n  gap?: number\n}> = ({ \n  children, \n  columns = { mobile: 1, tablet: 2, desktop: 3 },\n  gap = 16 \n}) => {\n  const [currentColumns, setCurrentColumns] = useState(columns.mobile)\n  \n  useEffect(() => {\n    const updateColumns = () => {\n      const width = window.innerWidth\n      if (width >= 1024) {\n        setCurrentColumns(columns.desktop)\n      } else if (width >= 768) {\n        setCurrentColumns(columns.tablet)\n      } else {\n        setCurrentColumns(columns.mobile)\n      }\n    }\n    \n    updateColumns()\n    window.addEventListener('resize', updateColumns)\n    return () => window.removeEventListener('resize', updateColumns)\n  }, [columns])\n  \n  const childrenArray = React.Children.toArray(children)\n  const columnArrays = Array.from({ length: currentColumns }, () => [] as React.ReactNode[])\n  \n  childrenArray.forEach((child, index) => {\n    const columnIndex = index % currentColumns\n    columnArrays[columnIndex].push(child)\n  })\n  \n  return (\n    <div \n      className=\"flex\"\n      style={{ gap: `${gap}px` }}\n    >\n      {columnArrays.map((column, index) => (\n        <div \n          key={index}\n          className=\"flex-1 flex flex-col\"\n          style={{ gap: `${gap}px` }}\n        >\n          {column}\n        </div>\n      ))}\n    </div>\n  )\n}\n\n// Mobile search overlay\nexport const MobileSearchOverlay: React.FC<{\n  isOpen: boolean\n  onClose: () => void\n  onSearch: (query: string) => void\n  placeholder?: string\n}> = ({ isOpen, onClose, onSearch, placeholder = \"Search case studies...\" }) => {\n  const [query, setQuery] = useState('')\n  \n  useEffect(() => {\n    if (isOpen) {\n      // Focus search input when overlay opens\n      setTimeout(() => {\n        const input = document.querySelector('#mobile-search-input') as HTMLInputElement\n        input?.focus()\n      }, 100)\n    }\n  }, [isOpen])\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSearch(query)\n    onClose()\n  }\n  \n  return (\n    <motion.div\n      className={`md:hidden fixed inset-0 z-50 bg-background ${isOpen ? 'block' : 'hidden'}`}\n      initial={{ opacity: 0, y: -20 }}\n      animate={{ opacity: isOpen ? 1 : 0, y: isOpen ? 0 : -20 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"flex items-center gap-4 p-4 border-b\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onClose}\n          className=\"h-10 w-10 p-0\"\n        >\n          <X className=\"h-6 w-6\" />\n        </Button>\n        \n        <form onSubmit={handleSubmit} className=\"flex-1\">\n          <input\n            id=\"mobile-search-input\"\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder={placeholder}\n            className=\"w-full px-4 py-3 text-lg bg-transparent border-none outline-none\"\n          />\n        </form>\n        \n        {query && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setQuery('')}\n            className=\"h-10 w-10 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      \n      <div className=\"p-4\">\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Search through {/* case studies count */} case studies\n        </p>\n        \n        {/* Recent searches or suggestions could go here */}\n        <div className=\"space-y-2\">\n          {['Digital transformation', 'E-commerce', 'Marketing automation'].map((suggestion) => (\n            <button\n              key={suggestion}\n              className=\"block w-full text-left px-4 py-2 text-sm hover:bg-muted rounded-lg transition-colors\"\n              onClick={() => {\n                setQuery(suggestion)\n                onSearch(suggestion)\n                onClose()\n              }}\n            >\n              {suggestion}\n            </button>\n          ))}\n        </div>\n      </div>\n    </motion.div>\n  )\n}\n\nexport default {\n  MobileFilterDrawer,\n  ResponsiveGrid,\n  TouchNavigationBar,\n  ParallaxHeader,\n  ScrollProgress,\n  BackToTopButton,\n  MasonryLayout,\n  MobileSearchOverlay\n}"